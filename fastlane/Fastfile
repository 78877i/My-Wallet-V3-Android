opt_out_usage

default_platform :android
platform :android do

    desc "Build using the given environment (default: Staging) and build type (default: Debug)."
    lane :build do | options |

      environment = options[:environment] ? options[:environment] : "Staging"

      build_type = options[:build_type] ? options[:build_type] : "Debug"

      gradle(
        task: 'assemble',
        build_type: build_type,
        flavor: 'Env' + environment,
        print_command: false
      )

    end

    desc "Build Staging Release"
    lane :staging_release do

      gradle(
        task: 'bundle',
        build_type: 'Release',
        flavor: 'EnvStaging',
        print_command: false
      )

    end

    desc "Build Prod Debug"
    lane :prod_debug do

      gradle(
        task: 'assemble',
        build_type: 'Debug',
        flavor: 'EnvProd',
        print_command: false
      )

    end

    desc "Build Prod Release"
    lane :prod_release do

      gradle(
        task: 'bundle',
        build_type: 'Release',
        flavor: 'EnvProd',
        print_command: false
      )

    end


    desc "Run tests. Optional flags: environment (Staging), build_type (Debug), module(app), test_name (runs all by default). Environment and build_type are app module-only."
    lane :test do | options |

      environment = options[:environment] ? options[:environment] : "Staging"

      build_type = options[:build_type] ? options[:build_type] : "Debug"

      if options[:test_name]

        if options[:module] && options[:module] != "app"

          gradle(
            task: ":" + options[:module] + ":test",
            flags: "--tests " + options[:test_name]
          )

        else

          gradle(
            task: "test",
            build_type: build_type + "UnitTest",
            flavor: 'Env' + environment,
            flags: "--tests " + options[:test_name]
          )

        end

      else

        if options[:module] && options[:module] != "app"

          gradle(
            task: ":" + options[:module] + ":test",
          )

        else

          gradle(
            task: "test",
            build_type: build_type + "UnitTest",
            flavor: 'Env' + environment,
          )

        end
        
      end

    end


    desc "Submit a release build to the Play Store internal test track."
    lane :upload_to_internal_track do

      upload_to_play_store(
          track: 'internal',
          validate_only: 'true',
      )

    end


    desc "Get the configuration files from the Android credentials repository."
    lane :credentials do

      credentials_folder = File.expand_path("../../wallet-android-credentials/")
      if !File.exist? credentials_folder

        sh("echo \"--------------Cloning Credentials Repo--------------\"")
        sh("git clone git@github.com:blockchain/wallet-android-credentials.git " + credentials_folder)

      end

      sh("rm -rf ../app/src/env")

      sh("echo \"--------------Pulling Latest Credentials--------------\"")
      sh("( cd " + credentials_folder + " ; git pull )")

      sh("echo \"--------------Unzip Firebase Credentials into app/src--------------\"")
      sh("unzip -o " + credentials_folder + "/env.zip -d ../app/src")

      sh("rm -rf ../app/src/__MACOSX")

      sh("echo \"--------------Copying Secrets Properties--------------\"")
      sh("cp " + credentials_folder + "/secrets.properties ../app")

      sh("echo \"--------------Copying Debug Signing Key--------------\"")
      sh("cp " + credentials_folder + "/blockchainDebugKey.keystore ../app")

      sh("echo \"--------------Copying Dogfood Signing Key--------------\"")
      sh("cp ../../tmp/credentials/blockchainInternalKey.keystore ../app")

    end


    desc "Bundle of build, perform checks and run tests on CI."
    lane :ci_run_tests do

      ci_credentials

      ci_lint

      ci_build(
        environment: "Prod",
        build_type: "Debug"
      )

       ci_test_app
       ci_test_balance
       ci_test_common
       ci_test_blockchainApi
       ci_test_core
       ci_test_nabu
       ci_test_notifications
       ci_test_sunriver
       ci_test_testutils
       ci_test_testutils_android
       ci_test_wallet

    end

    desc "Tests to run on CI app"
    lane :ci_test_app do
      gradle(
        task: "app:testEnvProdDebugUnitTest",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI balance"
    lane :ci_test_balance do
      gradle(
        task: "balance:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI common"
    lane :ci_test_common do
      gradle(
        task: "common:network:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )
      gradle(
        task: "common:interface:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI blockchainApi"
    lane :ci_test_blockchainApi do
      gradle(
        task: "blockchainApi:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI core"
    lane :ci_test_core do
      gradle(
        task: "core:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI nabu"
    lane :ci_test_nabu do
      gradle(
        task: "nabu:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI notifications"
    lane :ci_test_notifications do
      gradle(
        task: "notifications:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI sunriver"
    lane :ci_test_sunriver do
      gradle(
        task: "sunriver:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI testutils"
    lane :ci_test_testutils do
      gradle(
        task: "testutils:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI testutils-android"
    lane :ci_test_testutils_android do
      gradle(
        task: "testutils-android:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Tests to run on CI wallet"
    lane :ci_test_wallet do
      gradle(
        task: "wallet:test",
        flags: "-Dpre-dex=false -Pkotlin.incremental=false --stacktrace --no-daemon --max-workers 2"
      )

    end

    desc "Get the configuration files from the Android credentials repository on CI."
    lane :ci_credentials do

      sh("echo \"--------------Cloning Credentials Repo--------------\"")
      sh("git clone $CREDENTIALS_REPO ../../tmp/credentials")

      sh("echo \"--------------Unzip Firebase Credentials--------------\"")
      sh("unzip ../../tmp/credentials/env.zip  -d ../../tmp/credentials/")

      sh("echo \"--------------Copying Firebase Credentials--------------\"")
      sh("cp -r ../../tmp/credentials/env ../app/src")

      sh("echo \"--------------Copying Secrets Properties--------------\"")
      sh("cp ../../tmp/credentials/secrets.properties ../app")

      sh("echo \"--------------Copying Debug Signing Key--------------\"")
      sh("cp ../../tmp/credentials/blockchainDebugKey.keystore ../app")

      sh("echo \"--------------Copying Dogfood Signing Key--------------\"")
      sh("cp ../../tmp/credentials/blockchainInternalKey.keystore ../app")
    end

    desc "Cleanup the credentials repository"
    lane :ci_credentials_cleanup do

      sh("echo \"--------------Deleting Credentials Repo--------------\"")
      sh("rm -rf ../../tmp/credentials")
    end

    desc "Upload to AppCenter."
    lane :ci_upload_to_appcenter do | options |
      #  Expected env vars:
      #  APPCENTER_API_TOKEN, APPCENTER_OWNER_NAME, APPCENTER_DISTRIBUTE_FILE,
      #  APPCENTER_DISTRIBUTE_DESTINATIONS APPCENTER_DISTRIBUTE_RELEASE_NOTES and APPCENTER_APP_NAME
      file_path = options[:appcenter_file_path] ? options[:appcenter_file_path] : ENV["APPCENTER_DISTRIBUTE_FILE"]
      app_name = options[:app_name] ? options[:app_name] : ENV["APPCENTER_APP_NAME"]

      appcenter_upload(
        app_name: app_name,
        file: file_path
      )

    end

    desc "Export the build path to environment variables for upload. Optional flags: export_bundle (APK is default), do_sign (False is default)."
    lane :ci_export_build do | options |

      file_path = options[:build_path]

      do_sign = options[:do_sign] ? "true" : "false"

      if options[:export_bundle]

        sh("./../scripts/ci_export_aab.sh " + file_path + " " + do_sign)

      else

        sh("./../scripts/ci_export_apk.sh " + file_path + " " + do_sign)

      end

    end

    desc "Build to run on CI. Optional flags: copy_credentials, build_bundle (APK is default), export_build(False is default), do_sign (False is default)."
    lane :ci_build do | options |

      environment = options[:environment]

      build_type = options[:build_type]

      if options[:copy_credentials]

        ci_credentials

      end

      file_path = ""

      if options[:build_bundle]

        gradle(
          task: 'bundle',
          build_type: build_type,
          flavor: 'Env' + environment,
          print_command: false,
          flags: "--info"
        )

        file_path = "../app/build/outputs/bundle/env" + environment + build_type

      else

        gradle(
          task: 'assemble',
          build_type: build_type,
          flavor: 'Env' + environment,
          print_command: false,
          flags: "--info --stacktrace --no-daemon"
        )

        file_path = "../app/build/outputs/apk/env" + environment + "/" + build_type.downcase

      end

      if options[:export_build]

        ci_export_build(
          build_path: file_path,
          do_sign: options[:do_sign],
          export_bundle: options[:build_bundle]
        )
          
      end

    end


    desc "Checks to run on CI"
    lane :ci_lint do

      gradle(
        task: 'lint',
        build_type: 'Debug',
        flavor: 'EnvProd',
        print_command: false,
        flags: "lintDebug ktlint -Dpre-dex=false -Pkotlin.incremental=false --no-daemon --stacktrace"
      )
    end


    private_lane :ship_it do
      rand = Random.rand(0..1)
      if rand == 0
        squirrel
      elsif rand == 1
        boat
      end
    end
    

    def squirrel
      puts "
        !!!!
      !!!!!!!!
    !!!!!!!!!!!   O_O
    !!!  !!!!!!! /@ @\\
          !!!!!! \\ x /
          !!!!!!/ m  !m
           !!!!/ __  |
           !!!!|/  \\__
            !!!\\______\\
      "
    end


    def boat
      puts "
         .  o ..
         o . o o.o
              ...oo
                __[]__
             __|_o_o_o\__
             \\\"\"\"\"\"\"\"\"\"\"/
              \\. ..  . /
         ^^^^^^^^^^^^^^^^^^^^
      "
    end

    lane :edit_github_release do
        # Get the current and last release to be able to generate the changelog
        current_tag = last_git_tag
        previous_tag = sh("git describe --abbrev=0 --tags #{current_tag}^").strip
        previous_tag_hash = sh("git rev-list -n 1 #{previous_tag}")
        output_file_name = "result"
        # Generate the changelog from the last release to head
        changelog = Dir.chdir("..") do
          sh("printf '%s\n\n' \"#{current_tag}\" > changelog.txt")
          sh("git-changelog -x -t #{previous_tag_hash} >> changelog.txt")
          sh("cat changelog.txt")
        end
        # Find the AAB file
        aab_file = Dir.chdir("..") do
          aab_file = Dir.glob("app/build/outputs/**/*.aab").select { |e| File.file?(e) }
        end
        # Find the APK file
        apk_file = Dir.chdir("..") do
          Dir.glob("app/build/outputs/**/*.apk").select { |e| File.file?(e) }
        end
        # Find the mapping file for the generated AAB
        mapping_file = Dir.chdir("..") do
          Dir.glob("app/build/outputs/mapping/**/mapping.txt").select { |e| File.file?(e) }
        end
        # Generate the Hub CLI command to attach the files
        attach_files_cmd = ""
        files_to_attach = aab_file + apk_file + mapping_file
        for file in files_to_attach do
          attach_files_cmd.concat(" --attach ").concat("#{file}")
        end
        # Use Hub CLI to update the GitHub release
        Dir.chdir("..") do
          sh("hub release edit --file changelog.txt #{attach_files_cmd} #{current_tag}")
        end
    end

    after_all do |lane|
      # This block is called, only if the executed lane was successful
      ship_it
    end


    error do |lane, exception|
      # This block is called, only if the executed lane failed with an exception
    end
end